global:
  details: "Details"
  home: "Home"
  french: "Français"
  english: "English"
  back: "Back to Home"
  back_link: "/en/"

## ------------------------------ INDEX ------------------------ ##

index:
  title: "Arian Dervishaj"
  projets_perso_titre: "Personal Projects"
  projets_perso_desc: "These projects were initiated independently to address specific needs or to further develop my self-taught skills."
  projets_acad_titre: "Academic Projects"
  projets_acad_desc: "These projects were completed as part of my academic curriculum, demonstrating the practical application of theoretical concepts."

  # Generic column titles
  nom: "Name"
  competences: "Skills"
  description: "Description"
  liens: "Links"

  # Personal projects
  nuggets_nom: "Nuggets Of Wisdom"
  nuggets_competences: "JavaScript, SvelteKit, Database, Panzoom"
  nuggets_description: "Web platform for displaying SVG-based course notes."

  https_nom: "HTTPS Setup for My Services"
  https_competences: "Networking, Security, Docker"
  https_description: "Configured HTTPS using Pi-hole, Caddy, and Tailscale."

  # Academic projects
  solaire_nom: "Solar System Simulation"
  solaire_competences: "C, Newton’s Laws"
  solaire_description: "Graphical simulation of planetary orbits."

  lignes_nom: "Electric Field Line Simulation"
  lignes_competences: "C, Electromagnetism"
  lignes_description: "Visualization of electric fields."

  cert_nom: "Certificates"
  cert_competences: "Security, TLS"
  cert_description: "Created and managed HTTPS certificates."

  macflood_nom: "MacFlood Attack"
  macflood_competences: "Networking, Security"
  macflood_description: "Simulated a MacFlood attack and implemented Port Security as a defense."

  # Skills section
  competences_titre: "Skills"
  techniques: "Technical"
  languages: "Programming Languages"
  languages_list: "C, Java, Python, HTML/CSS, JavaScript"
  tools: "Tools"
  tools_list: "Git, Docker"
  domains: "Domains"
  domains_list: "Networking (fundamentals and configuration), Object-oriented and concurrent programming"

  soft_skills: "Soft Skills"
  spoken_languages: "Spoken Languages"
  spoken_languages_list: "French (native), English (B2/C1), Albanian (native)"
  personal_qualities: "Personal Qualities"
  personal_qualities_list: "Curiosity, autonomy, teaching ability, teamwork"

## ------------------------------ PROJETS ------------------------ ##

ligne_de_champs:
  title: Electric Field Line Simulation in C
  explication: >
    This program simulates electric field lines using the C programming language.<br>
    It calculates the electric fields generated by positive and negative charges, then visualizes their corresponding field lines.<br>
    The simulation provides insight into electric field behavior in complex configurations.
  features_title: "Features"
  features:
    - "Supports both positive and negative charges."
    - "Dynamically calculates resulting electric fields."
    - "Generates graphical representations of field lines."
  screenshots:
    - title: "Simulation with 10 positive charges, 10 negative charges, and 50 field lines"
      image: "/assets/lignes-de-champs/image.png"
    - title: "Simulation with 100 positive charges, 100 negative charges, and 5000 field lines"
      image: "/assets/lignes-de-champs/image-1.png"
    - title: "Simulation with 5 positive charges, 10 negative charges, and 500 field lines"
      image: "/assets/lignes-de-champs/image-2.png"
  run_title: "Running the Program"
  run_intro: "To launch the simulation, follow these steps:"
  run_steps:
    - "**Prerequisites**: Make sure you have a C compiler (such as `gcc`) and `make` installed."
    - "**Clone the repository**:"
    - "**Compile and run**:"
  run_clone: git clone https://github.com/ArianDervishaj/simulation-systeme-solaire.git
  run_build:
    - "cd simulation-lignes-de-champs"
    - "make main"
    - "./main <number_of_positive_charges> <number_of_negative_charges> <number_of_field_lines>"
  more_title: "Learn More"
  github_link: "View the GitHub Repository"

systeme_solaire:
  title: Solar System Simulation in C
  explanation: >
    This project was completed as part of the physics course at HEPIA.<br>
    It applies Newton's laws to simulate a planetary system, allowing the exploration of gravitational interactions between a central star and several planets.<br><br>
    This simulation puts into practice concepts of physics and programming to realistically visualize orbital dynamics.
  features_title: "Features"
  features:
    - "Real-time simulation of planetary orbits."
    - "Precise calculation of gravitational interactions according to Newton's laws."
    - "Simple and effective graphical visualization."
  screenshots:
    - title: "Simulation in action"
      image: "/assets/systeme-solaire/image.png"
  run_title: "Running the Program"
  run_intro: "To launch the simulation, follow these steps:"
  run_steps:
    - "**Prerequisites**: Make sure you have a C compiler (such as `gcc`) and `make` installed."
    - "**Clone the repository**:"
    - "**Compile and run**:"
  run_clone: git clone https://github.com/ArianDervishaj/solar-system-simulation.git
  run_build:
    - "cd solar-system-simulation"
    - "make main"
    - "./main"
  more_title: "Learn More"
  github_link: "View the GitHub Repository"
